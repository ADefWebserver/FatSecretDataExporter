@page "/getdata"
@inject IJSRuntime JsRuntime;
@inject IConfiguration Configuration
@inject IHttpContextAccessor _httpContextAccessor
@inject HttpClient Http

@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.Text.Json;
@using System.Text
@using System.Text.Json.Serialization;
@using fatsecret.platform.FatSecretExercise;
@using fatsecret.platform.FatSecretFood;
@using fatsecret.platform.FatSecretWeight;
@using FatSecretWebApp.Models.DBContext;

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util

@using FatSecretWebApp.Data;
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in FatSecretDataService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access FatSecretDataService using @Service
*@
@inherits OwningComponentBase<FatSecretDataService>
<h4>@ErrorMesage</h4>

@if (User.Identity.IsAuthenticated && boolHasAuthToken)
{
    <RadzenButton ButtonStyle="ButtonStyle.Warning"
                  Click="ClearAccessToken" Text="Clear Authorization Token" />
    <br />
    <br />
}

@if ((strRequestToken != "") && (AuthSecret == ""))
{
    <a target="_blank" href="https://www.fatsecret.com/oauth/authorize?oauth_token=@strRequestToken">
        <u>Click here to get Auth Code to enter below</u>
    </a>

    <br />
    <br />

    <input placeholder="Enter Auth Code" @bind="AuthCode" />
    <RadzenButton ButtonStyle="ButtonStyle.Success"
                  Click="GetAccessToken" Text="Authorize Application" />
}
@if (objFatSecretProfile != null)
{
    <br />
    try
    {
        <b>Goal Weight: </b> @String.Format("{0:00}", Convert.ToDouble(FatSecretUtility.GetPoundsFromKilos(objFatSecretProfile.profile.goal_weight_kg)))
        <b> Last Weight: </b> @String.Format("{0:00}", Convert.ToDouble(FatSecretUtility.GetPoundsFromKilos(objFatSecretProfile.profile.last_weight_kg)))
        <b> Last Weight Date: </b> @FatSecretUtility.GetDateFromFatSecretDay(objFatSecretProfile.profile.last_weight_date_int)
    }
    catch (Exception ex)
    {
        ErrorMesage = ex.GetBaseException().Message;
    }
}
<br />
<br />
@if (AuthSecret != "")
{
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Weight">
                @if (ShowGetWeightButton)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                  Click="GetWeight" Text="Get Weight  (click once and wait)" /><br /><br />
                }
                <ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="100" Height="50" />
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="12" AllowSorting="true"
                            Data="colFatSecretWeightOutput" TItem="FatSecretWeightOutput" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="FatSecretWeightOutput" Property="Date" Title="Date">
                            <Template Context="data">
                                @String.Format("{0:d}", data.Date)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretWeightOutput" Property="Weight" Title="Weight">
                            <Template Context="data">
                                @String.Format("{0:00}", data.Weight)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Exercise">
                @if (ShowGetExerciseButton)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                  Click="GetExercise" Text="Get Exercise   (click once and wait)" /><br /><br />
                }
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="12" AllowSorting="true"
                            Data="colFatSecretExerciseOutput" TItem="FatSecretExerciseOutput" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="FatSecretExerciseOutput" Property="Date" Title="Date">
                            <Template Context="data">
                                @String.Format("{0:d}", data.Date)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretExerciseOutput" Property="Calories" Title="Calories">
                            <Template Context="data">
                                @String.Format("{0:00}", data.calories)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Food">
                @if (ShowGetFoodButton)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                  Click="GetFood" Text="Get Food   (click once and wait)" /><br /><br />
                }
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="12" AllowSorting="true"
                            Data="colFatSecretFoodOutput" TItem="FatSecretFoodOutput" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="FatSecretFoodOutput" Property="Date" Title="Date">
                            <Template Context="data">
                                @String.Format("{0:d}", data.Date)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretFoodOutput" Property="calories" Title="Calories">
                            <Template Context="data">
                                @String.Format("{0:00}", data.calories)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretFoodOutput" Property="carbohydrate" Title="Carbohydrates">
                            <Template Context="data">
                                @String.Format("{0:00}", data.carbohydrate)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretFoodOutput" Property="fat" Title="Fats">
                            <Template Context="data">
                                @String.Format("{0:00}", data.fat)
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="FatSecretFoodOutput" Property="protein" Title="Proteins">
                            <Template Context="data">
                                @String.Format("{0:00}", data.protein)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
<br />
@code {
    private ClaimsPrincipal User;
    private string GoogleIdentifier = "";
    private bool boolHasAuthToken = false;

    public string ErrorMesage = "";
    public string ConsumerKey = "";
    public string ConsumerSecret = "";
    public string strRequestToken = "";
    public string strOauthTokenSecret = "";
    public string AuthCode = "";
    public string AuthToken = "";
    public string response = "";
    private bool logResult = false;

    public string AuthSecret = "";
    public string UserToken = "";

    public FatSecretProfile objFatSecretProfile;
    public FatSecretWeight objFatSecretWeight;
    public FatSecretWeightSingle objFatSecretWeightSingle;

    public FatSecretFood objFatSecretFood;
    public FatSecretFoodSingle objFatSecretFoodSingle;

    public FatSecretExercise objFatSecretExercise;
    public FatSecretExerciseSingle objFatSecretExerciseSingle;

    DateTime dtStartDate;

    bool ShowGetWeightButton = true;
    public List<FatSecretWeightOutput> colFatSecretWeightOutput = new List<FatSecretWeightOutput>();
    bool ShowGetFoodButton = true;
    public List<FatSecretFoodOutput> colFatSecretFoodOutput = new List<FatSecretFoodOutput>();
    bool ShowGetExerciseButton = true;
    public List<FatSecretExerciseOutput> colFatSecretExerciseOutput = new List<FatSecretExerciseOutput>();

    // Charting
    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;

    private LineDataset<TimeTuple<int>> _WeightDataSet;

    protected override async Task OnInitializedAsync()
    {
        // Set the user to determine if they are logged in
        User = _httpContextAccessor.HttpContext.User;
        if (User.Identity.IsAuthenticated)
        {
            GoogleIdentifier = User.Claims.FirstOrDefault(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Value;
            logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = "Logged in" });

            // Try to get their stored authToken
            var TokenResult = await @Service.GetFatSecretTokenAsync(GoogleIdentifier);

            if (TokenResult != null)
            {
                UserToken = TokenResult.FatSecretUserToken;
                AuthSecret = TokenResult.FatSecretAuthSecret;
                boolHasAuthToken = true;

                logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = "GetFatSecretTokenAsync returned tokens" });
            }
            else
            {
                logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = "GetFatSecretTokenAsync returned Null" });
            }
        }

        ConsumerKey = Configuration["ConsumerKey"];
        ConsumerSecret = Configuration["ConsumerSecret"];
        DateTime.TryParse("1/1/2018", out dtStartDate);

        response = "";
        // Obtaining a Request Token
        FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);
        api.GetAuthToken(out strRequestToken, out strOauthTokenSecret);
        await Task.CompletedTask;

        // Charting
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Weight Chart"
                },
                Legend = new Legend
                {
                    Display = false
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Weight"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Day,
                                TooltipFormat = "MM.DD.YYYY",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _WeightDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Weight per Day",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
    }

    void GetRequestToken()
    {
        response = "";
        // Obtaining a Request Token
        FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);
        api.GetAuthToken(out strRequestToken, out strOauthTokenSecret);
    }

    async Task ClearAccessToken()
    {
        if ((User.Identity.IsAuthenticated) && (boolHasAuthToken))
        {
            // Try to get their stored authToken
            var TokenResult = await @Service.GetFatSecretTokenAsync(GoogleIdentifier);
            bool result = await @Service.DeleteFatSecretTokenAsync(TokenResult);
            boolHasAuthToken = false;
        }
    }

    async void GetAccessToken()
    {
        ErrorMesage = "Authorizing application...";

        try
        {
            // Obtaining an Access Token (after user entered AuthCode by clicked link to Obtain a User Authorization Token)
            // This retuns the *AuthSecret*
            FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);
            api.GetAccessToken(strOauthTokenSecret, strRequestToken, AuthCode, out UserToken, out AuthSecret);
            await GetProfile();
        }
        catch (Exception ex)
        {
            ErrorMesage = ErrorMesage + $" Bad code entered!- {ex.GetBaseException().Message}.";
            return;
        }

        ErrorMesage = "";
    }

    async Task GetProfile()
    {
        try
        {
            // https://platform.fatsecret.com/api/Default.aspx?screen=rapiref&method=profile.get
            FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);
            api.GetProfile(UserToken, AuthSecret, out response);

            objFatSecretProfile = new FatSecretProfile();
            objFatSecretProfile.profile = new Profile();
            objFatSecretProfile.profile.last_weight_kg = "0";
            objFatSecretProfile.profile.goal_weight_kg = "0";
            objFatSecretProfile.profile.last_weight_date_int = "0";

            objFatSecretProfile = JsonSerializer.Deserialize<FatSecretProfile>(response);
        }
        catch (Exception ex)
        {
            ErrorMesage = ErrorMesage + $"Error: Calling FatSecretProfile - {ex.GetBaseException().Message}" + $" - {response}";
        }

        try
        {
            // If logged in and Token is not saved - - save Access Token
            if ((User.Identity.IsAuthenticated) && (!boolHasAuthToken))
            {
                bool boolTokenCreated = await @Service.CreateFatSecretTokenAsync(new FatSecretToken { GoogleUserName = GoogleIdentifier, FatSecretUserToken = UserToken, FatSecretAuthSecret = AuthSecret });
                boolHasAuthToken = true;
            }
        }
        catch (Exception ex)
        {
            ErrorMesage = ErrorMesage + $"Error: Calling FatSecretProfile - {ex.GetBaseException().Message}" + $" - {response}";
        }
    }

    async Task GetWeight()
    {
        try
        {
            ShowGetWeightButton = false;

            // https://platform.fatsecret.com/api/Default.aspx?screen=rapiref&method=weights.get_month
            FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);

            List<string> colCollection = new List<string>();
            colCollection.Add("Date,WeightP,WeightK\r\n");

            DateTime currentDate = dtStartDate.Date.AddDays(1 - dtStartDate.Day);
            while (currentDate <= DateTime.Now)
            {
                int FatSecretDate = FatSecretUtility.GetFatSecretDate(currentDate);

                api.GetWeight(UserToken, AuthSecret, FatSecretDate, out response);

                try
                {
                    objFatSecretWeight = JsonSerializer.Deserialize<FatSecretWeight>
                        (response);
                    foreach (var item in objFatSecretWeight.month.day)
                    {
                        colFatSecretWeightOutput.Add(new FatSecretWeightOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(item.date_int)),
                            Weight = Convert.ToDouble(FatSecretUtility.GetPoundsFromKilos(item.weight_kg))
                        });

                        colCollection.Add($"{FatSecretUtility.GetDateFromFatSecretDay(item.date_int)}," +
                        $"{FatSecretUtility.GetPoundsFromKilos(item.weight_kg)}," +
                        $"{item.weight_kg}\r\n");
                    }
                }
                catch
                {
                    objFatSecretWeightSingle = JsonSerializer.Deserialize<FatSecretWeightSingle>
                        (response);
                    if (objFatSecretWeightSingle.month.day != null)
                    {
                        colFatSecretWeightOutput.Add(new FatSecretWeightOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(objFatSecretWeightSingle.month.day.date_int)),
                            Weight = Convert.ToDouble(FatSecretUtility.GetPoundsFromKilos(objFatSecretWeightSingle.month.day.weight_kg))
                        });

                        colCollection.Add($"" +
                        $"{FatSecretUtility.GetDateFromFatSecretDay(objFatSecretWeightSingle.month.day.date_int)}," +
                        $"{FatSecretUtility.GetPoundsFromKilos(objFatSecretWeightSingle.month.day.weight_kg)}," +
                        $"{objFatSecretWeightSingle.month.day.weight_kg}\r\n");
                    }
                }

                currentDate = currentDate.AddMonths(1);
            }

            // Charting
            _WeightDataSet.AddRange(colFatSecretWeightOutput.Select(p => new TimeTuple<int>(new Moment(p.Date), Convert.ToInt32(p.Weight))));
            _lineConfig.Data.Datasets.Add(_WeightDataSet);
            _lineChartJs.Update();

            response = string.Join("", colCollection);
            await ExportData("Weight", response);
        }
        catch (Exception ex)
        {
            ErrorMesage = ex.GetBaseException().Message + $" - {response}";
            logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = ex.GetBaseException().Message });
        }
    }

    async Task GetExercise()
    {
        try
        {
            ShowGetExerciseButton = false;

            // https://platform.fatsecret.com/api/Default.aspx?screen=rapiref&method=exercise_entries.get_month
            FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);

            List<string>
                colCollection = new List<string>
                    ();
            colCollection.Add("Date,Calories\r\n");

            DateTime currentDate = dtStartDate.Date.AddDays(1 - dtStartDate.Day);
            while (currentDate <= DateTime.Now)
            {
                int FatSecretDate = FatSecretUtility.GetFatSecretDate(currentDate);

                api.GetExercise(UserToken, AuthSecret, FatSecretDate, out response);

                try
                {
                    objFatSecretExercise = JsonSerializer.Deserialize<FatSecretExercise>
                        (response);
                    foreach (var item in objFatSecretExercise.month.day)
                    {
                        colFatSecretExerciseOutput.Add(new FatSecretExerciseOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(item.date_int)),
                            calories = Convert.ToDouble(item.calories)
                        });

                        colCollection.Add($"{FatSecretUtility.GetDateFromFatSecretDay(item.date_int)},{item.calories}\r\n");
                    }
                }
                catch
                {
                    objFatSecretExerciseSingle = JsonSerializer.Deserialize<FatSecretExerciseSingle>
                        (response);
                    if (objFatSecretExerciseSingle.month.day != null)
                    {
                        colFatSecretExerciseOutput.Add(new FatSecretExerciseOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(objFatSecretExerciseSingle.month.day.date_int)),
                            calories = Convert.ToDouble(objFatSecretExerciseSingle.month.day.calories)
                        });

                        colCollection.Add($"" +
                        $"{FatSecretUtility.GetDateFromFatSecretDay(objFatSecretExerciseSingle.month.day.date_int)}," +
                        $"{objFatSecretExerciseSingle.month.day.calories}\r\n");
                    }
                }

                currentDate = currentDate.AddMonths(1);
            }

            response = string.Join("", colCollection);
            await ExportData("Exercise", response);
        }
        catch (Exception ex)
        {
            ErrorMesage = ex.GetBaseException().Message + $" - {response}";
            logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = ex.GetBaseException().Message });
        }
    }

    async Task GetFood()
    {
        try
        {
            ShowGetFoodButton = false;

            // https://platform.fatsecret.com/api/Default.aspx?screen=rapiref&method=food_entries.get_month
            FatSecretAPI api = new FatSecretAPI(ConsumerKey, ConsumerSecret);

            List<string>
                colCollection = new List<string>
                    ();
            colCollection.Add("Date,Calories,Carbohydrates,Fats,Proteins\r\n");

            DateTime currentDate = dtStartDate.Date.AddDays(1 - dtStartDate.Day);
            while (currentDate <= DateTime.Now)
            {
                int FatSecretDate = FatSecretUtility.GetFatSecretDate(currentDate);

                api.GetFood(UserToken, AuthSecret, FatSecretDate, out response);

                try
                {
                    objFatSecretFood = JsonSerializer.Deserialize<FatSecretFood>
                        (response);
                    foreach (var item in objFatSecretFood.month.day)
                    {
                        colFatSecretFoodOutput.Add(new FatSecretFoodOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(item.date_int)),
                            calories = Convert.ToDouble(item.calories),
                            carbohydrate = Convert.ToDouble(item.carbohydrate),
                            fat = Convert.ToDouble(item.fat),
                            protein = Convert.ToDouble(item.protein)
                        });

                        colCollection.Add(
                        $"{FatSecretUtility.GetDateFromFatSecretDay(item.date_int)}," +
                        $"{item.calories},{item.carbohydrate},{item.fat},{item.protein}\r\n");
                    }
                }
                catch
                {
                    objFatSecretFoodSingle = JsonSerializer.Deserialize<FatSecretFoodSingle>
                        (response);
                    if (objFatSecretFoodSingle.month.day != null)
                    {
                        colFatSecretFoodOutput.Add(new FatSecretFoodOutput
                        {
                            Date = Convert.ToDateTime(FatSecretUtility.GetDateFromFatSecretDay(objFatSecretFoodSingle.month.day.date_int)),
                            calories = Convert.ToDouble(objFatSecretFoodSingle.month.day.calories),
                            carbohydrate = Convert.ToDouble(objFatSecretFoodSingle.month.day.carbohydrate),
                            fat = Convert.ToDouble(objFatSecretFoodSingle.month.day.fat),
                            protein = Convert.ToDouble(objFatSecretFoodSingle.month.day.protein)
                        });

                        colCollection.Add($"" +
                        $"{FatSecretUtility.GetDateFromFatSecretDay(objFatSecretFoodSingle.month.day.date_int)}," +
                        $"{objFatSecretFoodSingle.month.day.calories}," +
                        $"{objFatSecretFoodSingle.month.day.carbohydrate}," +
                        $"{objFatSecretFoodSingle.month.day.fat}," +
                        $"{objFatSecretFoodSingle.month.day.protein}\r\n");
                    }
                }

                currentDate = currentDate.AddMonths(1);
            }

            response = string.Join("", colCollection);
            await ExportData("Food", response);
        }
        catch (Exception ex)
        {
            ErrorMesage = ex.GetBaseException().Message + $" - {response}";
            logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = ex.GetBaseException().Message });
        }
    }

    // Utility

    public async Task ExportData(string FileName, string data)
    {
        string strFinalFileName = $"{FileName}.csv";

        byte[] bytes = Encoding.ASCII.GetBytes(data);

        await JsRuntime.InvokeVoidAsync(
        "jsFunctions.saveFile",
        strFinalFileName,
        bytes,
        "application/octet-stream");

        logResult = await @Service.CreateFatSecretLogAsync(new FatSecretLog { GoogleUserName = GoogleIdentifier, LogTexxt = $"Exported {strFinalFileName}" });
    }
}
